function tom_rawwrite(em_name,Data,form)
% TOM_RAWWRITE writes data in an raw-file format
%
%   tom_rawwrite(em_name,Data,form)
%
%PARAMETERS
%
%  INPUT
%   name                ['PATHNAME' 'FILENAME']
%   Data                Values of Image Data
%  
%  OUTPUT
%
%EXAMPLE
%
%   tom_rawwrite('HPIEMV.raw',out);
%
%
%REFERENCES
%
%SEE ALSO
%   TOM_RAWREAD,TOM_EMWRITE, TOM_EMHEADER, TOM_READEMHEADER
%
%   created by SN 12/01/09
%
%   Nickell et al., 'TOM software toolbox: acquisition and analysis for electron tomography',
%   Journal of Structural Biology, 149 (2005), 227-234.
%
%   Copyright (c) 2004-2007
%   TOM toolbox for Electron Tomography
%   Max-Planck-Institute of Biochemistry
%   Dept. Molecular Structural Biology
%   82152 Martinsried, Germany
%   http://www.biochem.mpg.de/tom


if nargin <1 error(['Data not specified']);  end;

[str,maxsize,endian] = computer;
if nargin <3 


end;

    if isequal (computer,'PCWIN') | isequal(computer,'GLNX86') | isequal(computer,'GLNXA64') | isequal(computer,'PCWIN64') | isequal(computer,'MACI')
        fid = fopen(em_name,'w','ieee-le'); Data.Header.Magic(1)=6;
    else
        fid = fopen(em_name,'w','ieee-be');
    end;    
    if fid==-1 error (['Cannot write: ' em_name ' file']); end;
        % writes the header
    %
    % description in 'The Structure of the EM-Data Files', Herr Hegerl
    %

    
    
    if size(Data.Header.Magic,1)~=4
    	Data.Header.Magic=[6 0 0 5]';
    end
    fwrite(fid,Data.Header.Magic,'char');

    if size(Data.Header.Size,1)~=3
	Data.Header.Size(1)=size(Data.Value,1);
	Data.Header.Size(2)=size(Data.Value,2);
	Data.Header.Size(3)=size(Data.Value,3);
    end
    fwrite(fid,Data.Header.Size,'int32');
    if size(Data.Header.Comment,2)<80
        f=ones((80-size(Data.Header.Comment,2)),1).*32;
    	Data.Header.Comment(size(Data.Header.Comment,2)+1:80)=f;
    else
        Data.Header.Comment=Data.Header.Comment(1:80);
    end
    fwrite(fid,Data.Header.Comment,'char');

    if size(Data.Header.EM.Parameter,1)~=40
    	Data.Header.EM.Parameter((end+1):40)=ones(40-length(Data.Header.EM.Parameter),1);
    end
    fwrite(fid,Data.Header.EM.Parameter,'int32');

    if (~isfield(Data.Header,'Fillup') || size(Data.Header.Fillup,1)~=256) 
    	Data.Header.Fillup=ones(256,1);
    end
fwrite(fid,Data.Header.Fillup,'char');

% the size of the image
% to adapt to EM, transpose '
%xdim = Data.Header.Size(2);
%ydim = Data.Header.Size(1);

xdim = Data.Header.Size(1);
ydim = Data.Header.Size(2);
zdim = Data.Header.Size(3);
Data_write=0;

for lauf=1:zdim
	% what byte format?
	% to adapt to EM, transpose '
	%Data_write=Data.Value(1:xdim,1:ydim,lauf)';
	
	Data_write=squeeze(Data.Value(1:xdim,1:ydim,lauf));

	if Data.Header.Magic(4)==1
		fwrite(fid,Data_write,'char');
	elseif Data.Header.Magic(4)==2
		fwrite(fid,Data_write,'int16');
	elseif Data.Header.Magic(4)==4
		fwrite(fid,Data_write,'int32');
	elseif Data.Header.Magic(4)==5
		fwrite(fid,Data_write,'float');
	elseif Data.Header.Magic(4)==8
		fwrite(fid,Data_write,'float64');
	else
		disp('Sorry, i cannot write this as an EM-File !!!');
	end;

end;

fclose(fid);

