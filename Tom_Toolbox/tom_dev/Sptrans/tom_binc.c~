#include "mex.h"

void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray*prhs[])
{
    
    unsigned int binning[3], ndims;
    int output_dims[3];
    const double *p_binning;
    mxArray *indata, *outdata;
    mxClassID datatype;
    const int  *input_dims;
    register int idx, idy, idz, bidx, bidy, bidz, ixrun = 0, iyrun = 0, izrun = 0;
    char binvalue = 0.0;
        
    p_binning=mxGetData(prhs[1]);
    binning[0]=(unsigned int)p_binning[0];
    binning[1]=(unsigned int)p_binning[1];
    binning[2]=(unsigned int)p_binning[2];
    
    const double bin_vol = (double) binning[0] * binning[1] * binning[2];
    
    indata = mxGetData(prhs[0]);
    ndims=mxGetNumberOfDimensions(prhs[0]);
    
    datatype = mxGetClassID(prhs[0]);
    switch (datatype)  {
        case mxINT8_CLASS:   analyze_int8(numeric_array_ptr);   break;
        case mxUINT8_CLASS:  analyze_uint8(numeric_array_ptr);  break;
        case mxINT16_CLASS:  analyze_int16(numeric_array_ptr);  break;
        case mxUINT16_CLASS: analyze_uint16(numeric_array_ptr); break;
        case mxINT32_CLASS:  analyze_int32(numeric_array_ptr);  break;
        case mxUINT32_CLASS: analyze_uint32(numeric_array_ptr); break;
        case mxSINGLE_CLASS: analyze_single(numeric_array_ptr); break;
        case mxDOUBLE_CLASS: analyze_double(numeric_array_ptr); break;
    }
    
    if (ndims > 3 || ndims < 2) { mexErrMsgTxt("Input matrix must be 2D or 3D.\n"); }
    
    input_dims = mxGetDimensions(prhs[0]);
    output_dims[0] = (unsigned int) input_dims[0] / (unsigned int) binning[0]; 
    output_dims[1] = (unsigned int) input_dims[1] / (unsigned int) binning[1];
    
    if (ndims == 3) {
        output_dims[2] = (unsigned int) input_dims[2] / (unsigned int) binning[2];
    }
    else {
        output_dims[2] = 1;
        binning[2] = 1;
    }
   
    if ((plhs[0] = mxCreateNumericArray(3,output_dims,datatype,mxREAL))==NULL) { mexErrMsgTxt("Memory allocation problem in tom_binc.\n"); }
    outdata = mxGetData(plhs[0]);
    switch (datatype
    for(idz=0;idz<input_dims[2]-binning[2];idz = idz + binning[2]) {
        for(idy=0;idy<input_dims[1]-binning[1];idy = idy + binning[1]) {
            for(idx=0;idx<input_dims[0]-binning[0];idx = idx + binning[0]) {
                
                for(bidz=0;bidz<binning[2];bidz++) {
                    for(bidy=0;bidy<binning[1];bidy++) {
                        for(bidx=0;bidx<binning[0];bidx++) {
                            binvalue = ((double*)indata)[idx+bidx + (idy+bidy)*input_dims[0] + (idz+bidz)*input_dims[1]*input_dims[0]] + binvalue;
                        }
                    }
                }
                
                ((double*)outdata)[ixrun+iyrun*output_dims[0]+izrun*output_dims[0]*output_dims[1]] = binvalue / bin_vol;
                binvalue = 0.0;
                ixrun++;
            }
            ixrun = 0;
            iyrun++;
        }
        iyrun = 0;
        izrun++;
    }
  
    
}
