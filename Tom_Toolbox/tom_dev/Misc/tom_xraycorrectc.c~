/*=================================================================
 *
 * tom_xraycorrectc.c	Performs an in-place xray-correction
 *	                
 *
 * The syntax is:
 *
 *		tom_xraycorrectc(IMG,MEAN,STD)
 *
 *  Electron Tomography toolbox of the
 *  Max-Planck-Institute for Biochemistry
 *  Dept. Molecular Structural Biology
 *  82152 Martinsried, Germany
 *  http://www.biochem.mpg.de
 *
 * Last changes: 30.09.2008
 * By: Stephan Nickell
 * Revision: 1.00 by 
 *
 *=================================================================*/
#include <stdio.h> 
#include <stdlib.h> 
#include <string.h> 
#include <math.h>
#include "mex.h"
#include "matrix.h"

/* Input Arguments */
#define	IMG     prhs[0]
#define	MEAN	prhs[1]
#define	STD	prhs[2]

int valid_pos( 
  int pos_x,
  int pos_y,
  int dim_x,
  int dim_y
  ) 
{
if (pos_x>=0 && pos_x<dim_x && pos_y>=0 && pos_y<dim_y) return(1);
else return(0);
}


static void tom_xraycorrect( 
  short *img, 
  float mean, 
  float std, 
  int dim_x,
  int dim_y
  ) 
{
int ix, iy;
int iix, iiy;
float mm,mp;
float val;
int idx;
long int count;

mm=mean-std;
mp=mean+std;
count=0;

for (ix=0;ix<dim_x;ix++){
    for (iy=0;iy<dim_y;iy++){
        if((float)img[ix+iy*dim_y]<=mm || (float)img[ix+iy*dim_y]>=mp){
            /* interpolate */
            val=0; idx=0; count++;
            for (iix=-1;iix<2;iix++){
                for (iiy=-1;iiy<2;iiy++){
                    if (valid_pos(ix+iix, iy+iiy, dim_x, dim_y)) {
                        if ((float)img[ix+iy*dim_y+iix+iiy]>mm && (float)img[ix+iy*dim_y+iix+iiy]<mp){
                            val=(float)img[ix+iy*dim_y+iix+iiy]+val;
                            idx++;
                        }
                    }
                }
            }
            printf("idx: %i \n",idx);
            val=val/(float)idx;
            img[ix+iy*dim_y]=(short)val;
        }
    }
}
printf("Xray correction applied. %i value(s) outside range: %f to %f\n",count,mm,mp);

}


void mexFunction( int nlhs, mxArray *plhs[], 
		  int nrhs, const mxArray*prhs[] )
     
{ 
    short *img;
    double *p_offs;
    const mwSize *pp_dims;
    float std; 
    float mean; 
    int flag; 
    size_t dim[3];
    size_t ndim; 
    
    /* Check for proper number of arguments */
    
    if (nrhs != 3) { 
	mexErrMsgTxt("Three input arguments required.\n Syntax: tom_xraycorrectc(IMG,MEAN,STD*FACTOR)\n IMG: uncorrected image\n MEAN: mean value of IMG\n STD*FACTOR: standard deviation times factor\n"); 
    } else if (nlhs > 0) {
	mexErrMsgTxt("No output arguments."); 
    } 
    ndim = mxGetNumberOfDimensions(prhs[1]);
    if (ndim != 2) { 
	mexErrMsgTxt("Two dimensional image as input requiered.\n"); 
    }
    if ( mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) || mxIsSingle(prhs[0]) )
                mexErrMsgTxt("Input image must be of type int16.\n");

    /* Check the dimensions of IN. */ 
    /* Get the number of dimensions in the input argument. */
    
    mean = mxGetScalar(MEAN); 
    std = mxGetScalar(STD); 
    if (std == 2) { 
	mexErrMsgTxt("Two dimensional image as input requiered.\n"); 
    }

    pp_dims=mxGetDimensions(prhs[0]);
    dim[0]=pp_dims[0];
    dim[1]=pp_dims[1];

    /* Assign pointers to the various parameters */ 
    img = mxGetData(IMG);
    /* Do the actual computations in a subroutine */
    tom_xraycorrect(img,mean,std,dim[0],dim[1]);
    return;    
}
