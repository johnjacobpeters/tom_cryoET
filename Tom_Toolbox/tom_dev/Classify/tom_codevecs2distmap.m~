function tom_codevecs2distmap(codvecs, gridsize, grid_top,metric,obs_dim,origin)

% for i=1:gridsize(1).*gridsize(2)
%     codvecs(:,:,i) = tom_norm(codvecs(:,:,i)+100,'phase');
% end
% 
% codvecs=reshape(codvecs,[],gridsize(1).*gridsize(2));
%1: hor
%2: vert

if (nargin < 3)
    grid_top='rect';
end;


if (nargin < 4)
    metric='euclidien';
end;


if (nargin < 5)
    obs_dim=1;
end;


if (nargin < 6)
    origin=[(floor(gridsize(1)./2)+1) (floor(gridsize(1)./2)+1)];
end;


%normalize all values to phase contrast
for i=1:size(codvecs,1)
    codvecs(i,:)=tom_norm(codvecs(i,:)+100,'phase');
end;

%build nodes structure
ns = struct();
for i=1:gridsize(1).*gridsize(2)
    dists = [];
    [neighbours directions] = tom_neighbour2dgrid(i,gridsize,grid_top);
    ns(i).neighbours = neighbours;
    ns(i).directions = directions;
    ns(i).pos='';
    for ii=1:length(neighbours)
        if (strcmp(metric,'euclidien') )
            dists(ii) = sum( ( (codvecs(i,:)-codvecs(neighbours(ii),:) ).^2)) .^(1/2);
        else
            %reshape images    
            if (size(dim,2)==2)
                
            end;
            
            if (size(dim,2)==3)
            
            end;
            
            ccf=tom_corr(reshape(codvecs(i,:),24,24),reshape(codvecs(neighbours(ii),:),24,24),'norm');
            [pos val]=tom_peak(ccf);
            dists(ii)=-0.5.*val + 0.5;
        end;
    end;
    ns(i).dists = dists;
end


%initialize
nodepos=((origin(1)-1).*gridsize(1)) + origin(2);
ns(nodepos).pos =[0 0];


while all_pos_set(ns)

    %find nodes with positions
    z=1;
    for i=1:size(ns,2)
        if (isempty(ns(i).pos)==0)
           list(z)=i;
           z=z+1;
         end;
    end;

   %find neighbours & calc distance
   for i=1:max(size(list))
       tmp_neig=ns(list(i)).neighbours;
       for ii=1:max((size(tmp_neig)))
           if (isempty(ns(tmp_neig(ii)).pos)) 
                ns=calc_pos(ns,tmp_neig(ii));
           end;
       end;
   end;



end;

disp('hallo');


for i=1:gridsize(1).*gridsize(2)
    x(i) = ns(i).pos(1);
    y(i) = ns(i).pos(2);
end
% x=tom_norm(x,1);
% y=tom_norm(y,1);
figure;plot(x,y,'ro');%axis ij;
figure; hold on;
for i=1:25
    plot(x(i),y(i),'ro');
    all_pos(i,1)=x(i);
    all_pos(i,2)=y(i);
    disp([ num2str(i)  ':  ' num2str(x(i)) ' ' num2str(y(i))]);
    %ginput(1);
end;
hold off;


figure; hold on;
for i=1:size(codvecs,1)
    plot(x(i),y(i),'ro','MarkerSize',5,'MarkerFaceColor','r','MarkerEdgeColor','b');
    tmp_neig=ns(i).neighbours;
    x_tmp(1)=x(i);
    y_tmp(1)=y(i);
    for ii=1:max(size(tmp_neig))
        x_tmp(2)=x(tmp_neig(ii));
        y_tmp(2)=y(tmp_neig(ii));
      plot(x_tmp,y_tmp);
    end;
 end;
hold off;



disp('hallo');

function ns=calc_pos(ns,node)

tmp_neig=ns(node).neighbours;

new_pos=[0 0];

for i=1:max(size(tmp_neig))
    if (isempty(ns(tmp_neig(i)).pos )==0 )
        new_pos=new_pos+ (ns(node).directions(i,:).*ns(node).dists(i)) + (abs(ns(node).directions(i,:)).*ns(tmp_neig(i)).pos);
    end;
end;

%update
ns(node).pos=new_pos;


function [flag]=all_pos_set(ns)


flag=0;

for i=1:size(ns,2)
   if (isempty(ns(i).pos))
        flag=1;
   end;
end







% for node=2:gridsize(1).*gridsize(2)
%     if node==7
%         'h'
%     end
%     %ns(node).pos = ns(node-1).pos;
%     newpos = [0 0];
%     for nei = ns(node).neighbours
%         if nei < node
%             n = find(ns(node).neighbours == nei);
%             newpos = newpos + ns(nei).pos .* abs(ns(node).directions(n,:)) + ns(node).dists(n) .* ns(node).directions(n,:);
%         end
%     end
%     ns(node).pos = newpos;
% end
% 
% x = [];
% y = [];
% for i=1:gridsize(1).*gridsize(2)
%     x(i) = ns(i).pos(1);
%     y(i) = ns(i).pos(2);
% end

% figure;plot(x,y,'ro');%axis ij;
% 













%node = sub2ind(gridsize,floor(gridsize(1)./2)+1,floor(gridsize(2)./2)+1);

% dists = zeros(2,gridsize(1).*gridsize(2));
% 
% [neighbours directions] = tom_neighbour2dgrid(node,gridsize,metric);
% 
% for i=1:length(neighbours)
%     dists(directions(i),neighbours(i)) = sum( (codvecs(:,node)-codvecs(:,neighbours(i))).^2 ) .^ (1/2)
% end
% 
% dists