function statistic=tom_corr_subregions_clean_statistic(statistic,nr_std)


%TOM_CORR_SUBREGIONS_CLEAN_STATISTIC refines the statistics generated by
%tom_corr_subregions by eliminating outliers
%
%   statistic=tom_corr_subregions_clean_statistic(statistic,nr_std);
%
%
%PARAMETERS
%
%  INPUT
%   img_1, img_2        shifted input images.
%   area_type           defines different type of region definitions:
%                       'random', 'grid', 'feature', 'tiltaxis'
%                       'random': create random postions, spread over
%                       the image.
%                       'grid': create regular grid postions evenly spread over
%                       the image.
%                       'feature': apply an edge-filter then a bandpass filter
%                       and extract subregions.
%                       'tiltaxis': extract subregions from an area along
%                       the tiltaxis. Use the tiltaxis definition by
%                       tom_setmark. Positive y-direction is 0 degree with positive
%                       angles in right-turn direction. Use degrees.
%   area_size           x-y-dimension of subregions.
%   area_nr             number of subregions.
%   area_seed           x-y coordinates of seed positions used for
%                       subregion-correlation. If area_type is set to
%                       'tiltaxis' use this parameter as an tiltangle in
%                       degrees.
%   area_seed_region    area [x1 y1; x2 y2] defining the range of randomly
%                       generated subregions. If area_type is set to
%                       'tiltaxis' use this parameter as an area definition
%                       for the width of the subregion. 0<a<=.5. (0.3 is 30%
%                       of the image size).
%   method              only 'xcf' supported.
%   search_radius       not supported, yet.
%   nr_std              times standard deviation, used for cleaning the
%                       statistics (typically 1, 2, 3).
%   demo                demo mode on=1/off=0.
%                     
%  
%  OUTPUT
%   shifts              shift vector of images.
%   shifts_std          standard deviation of shift vector of images.
%   statistic           complete statistic of subregion-correlation.
%
%EXAMPLE
%   Calculate the shift of image 'in1b' and 'in2b' with randomly spread
%   subregions of size 64x64 pixels. Use 200 subregions, 1std for cleaning
%   and turn the demo mode on;
%   [shifts shifts_std statistic]=tom_corr_subregions(in1b,in2b,'random',64,200,0,0,'xcf',512,1,1);
%
%   Calculate the shift of image 'in1b' and 'in2b' with randomly spread
%   subregions along the tiltaxis with 76 degrees of size 64x64 pixels. The
%   width of the are is 20% of the image.
%   Use 50 subregions, 2std for cleaning and turn the demo mode on;
%   [shifts shifts_std statistic]=tom_corr_subregions(in1b,in2b,'tiltaxis',64,50,76,.2,'xcf',512,2,1);
%
%REFERENCES
%
%SEE ALSO
%   TOM_CORR_SUBREGIONS, TOM_CORR
%
%   created by SN 30/09/08
%
%   Nickell et al., 'TOM software toolbox: acquisition and analysis for electron tomography',
%   Journal of Structural Biology, 149 (2005), 227-234.
%
%   Copyright (c) 2004-2007
%   TOM toolbox for Electron Tomography
%   Max-Planck-Institute of Biochemistry
%   Dept. Molecular Structural Biology
%   82152 Martinsried, Germany
%   http://www.biochem.mpg.de/tom

    
hit=1;
nohit=1;
hits=statistic.shift_hit;
nohits=statistic.shift_nohit;
allhits=[hits; nohits];
statistic.shift_nohit=[];
statistic.shift_hit=[];
pos_hit=statistic.pos_hit;
statistic.pos_hit=[];
pos_nohit=statistic.pos_nohit;
statistic.pos_nohit=[];
allpos=[pos_hit; pos_nohit];

for i=1:size(allhits,1)
    devx_min=statistic.shift_hit_mean(1)-statistic.shift_hit_std(1).*nr_std;
    devx_max=statistic.shift_hit_mean(1)+statistic.shift_hit_std(1).*nr_std;

    devy_min=statistic.shift_hit_mean(2)-statistic.shift_hit_std(2).*nr_std;
    devy_max=statistic.shift_hit_mean(2)+statistic.shift_hit_std(2).*nr_std;

    
    if allhits(i,1)<devx_min ||  allhits(i,1)>devx_max ...
            || allhits(i,2)<devy_min || allhits(i,2)>devy_max 
                statistic.shift_nohit(nohit,:)=allhits(i,:);
                statistic.pos_nohit(nohit,:)=allpos(i,:);
                nohit=nohit+1;
    else
                statistic.shift_hit(hit,:)=allhits(i,:);
                statistic.pos_hit(hit,:)=allpos(i,:);
                hit=hit+1;
    end;
end;
statistic.hit=hit-1;
statistic.nohit=nohit-1;
statistic.shift_hit_mean(1)=mean(statistic.shift_hit(:,1));
statistic.shift_hit_mean(2)=mean(statistic.shift_hit(:,2));
statistic.shift_hit_std(1)=std(statistic.shift_hit(:,1));
statistic.shift_hit_std(2)=std(statistic.shift_hit(:,2));
